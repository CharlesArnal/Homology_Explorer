Mot de passe wsl : WSL2022!

Exemple d'utilisation de topcom :
points2finetriang < essais_personnels/test2D3.dat -v  1>essais_personnels/output.dat 2>essais_personnels/error.txt

quand les SimplicialComplex, Chirotopes etc. lisent un file.dat, ils lisent les lignes leur correspondant (pour peu qu'elles soient dans le bon ordre),
et uniquement celles-ci, qui disparaissent ensuite
Exemple :
[[0, 0, 1], [1, 0, 1], [2, 0, 1], [3, 0, 1], [0, 1, 1], [0, 2, 1], [0, 3, 1], [1, 1, 1], [1, 2, 1], [2, 1, 1]]

[[3, 2, 1, 0, 9, 8, 6, 7, 5, 4], [6, 8, 9, 3, 5, 4, 0, 7, 1, 2]]

{{0, 3, 6}}
à lire avec
points.read(myfile_current_triang);
symmetries.read(myfile_current_triang);
seed.read(myfile_current_triang);

Ils peuvent bien sûr aussi lire un fichier ne contenant qu'une seule ligne (la bonne)

Leur système de compilation ne reconnaît pas les .cpp, seulement les .cc

TriangNode hérite de SimplicialComplex
Les SimplicialComplex peuvent lire les triang sous le format {{...},...,{...}}, les TriangNode celles sous le format [0->10,3:{...}]
(de même pour write)
Les exécutables de la librairie semblent préférer le format {{...},...,{...}}
On récupère le nombre de points et le rang avec le fichier du chiro - autant tout mettre au format {{...},...,{...}}

TriangFlips doit lire quelque chose de la forme [10,3:[[{9},{3,6}]->0]]
Je n'arrive pas à faire lire Flip ou FlipRep directement

Tabu search où on considère simultanément les distributions de signe et les triangulations voisines (sur un pied d'égalité) ?

Les points pour les subdivisions duales doivent être de la forme :
1 2 0 0
1 1 0 1
1 0 0 2
1 1 1 0
1 0 1 1
1 0 2 0
(un 1 au début, puis des coordonnées homogènes)
Pourquoi tout doit-il être "doublement homogène" ?

P.S. : A side question : it seems that the points of the dual subdivision used to define a hypersurface (as above) need to be of the shape
 "1 [coordinates whose sum is always the same]", e.g.
1 2 0 0
1 1 0 1
1 0 0 2
1 1 1 0
1 0 1 1
1 0 2 0
Why is that, even though the documentation for SubdivisionOfPoints calls it "The inhomogeneous variant of SubdivisionOfVectors" ?
Homologie dans R^n ou P^n ?
Apparemment P^n

Demander à Joswig dans sa réponse s'il y a une façon algorithmiquement efficace de tirer les points non-redondants
d'une liste de points et d'une subdivision
Regarder si (et comment) c'est fait dans topcom
Le faire en C++ (dans nb_triang) ?
On pourrait aussi le faire avec une jolie fonction python (un dictionnaire indices : points, etc.)
Avancer sur les autres points en attendant

Ecrire TOUTES les triangulations sur une seule ligne, sous la forme (topcomp-compatible) {{7,8,9},{5,7,9},{4,6,9},{5,6,9},{1,2,4},{0,1,4},{2,3,4},{0,4,6},{0,5,6},{8,9,10}}
Pour que Polymake puisse les lire, il faut supprimer la première et la dernière accolade et les virgules ("{7 8 9}{5 7 9}{4 6 9}{5 6 9}{1 2 4}{0 1 4}{2 3 4}{0 4 6}{0 5 6}{8 9 10}")
CRT produit pour l'instant des triangulations de la forme {{11 12 13}{5 7 11}{6 7 11}{4 8 9}{5 6 7}{1 2 5}{1 4 5}{0 1 4}{2 3 6}{2 5 6}{0 4 8}{4 9 10}{4 5 12}{4 10 12}{5 11 12}{10 12 14}{12 13 14}}

Remarque: polymake prend en input (pour définir les matrices, par exemple) des références vers des arrays, et non des arrays:
(0,1) non
[(0,1)] ou [0,1] ou [split(" ",$my_string)] oui


Didgeridoo : écrire
nohup python3 test.py &
pour lancer un job, et 
top
pour en voir l'état

Le code de visualisation des variétés n'est pas le même selon l'OS - sur Ubuntu, utiliser threejs avec Chrome (pas Firefox) fonctionne correctement (donc threejs($h1_pw_r->VISUAL); )
Apparemment, la préférence par défaut est devenue threejs + Chrome, et écrire $h1_pw_r->VISUAL suffit (après plusieurs minutes)
On peut dézoomer (en bougeant deux doigts dans la même direction, pas en les écartant), et il y a énormément d'options dans un onglet en haut à gauche

Problème : CRT ne produit apparemment pas des triangulations au même format exactement que Explore_Triangs, car le produit de CRT n'est pas compatible avec visualize_hypersurface

A vérifier : l'output de RL_v3 (au moins avec signs_opti_w_fixed_triang.py) est un peu étrange, il faudrait peut-être investiguer 

Problème : alors que minor est censé renvoyer une Matrix, ceci:
$relevant_points = $points->minor($relevant_indices[0],[0..$points->cols()-1]);
$dual_sub = new fan::SubdivisionOfPoints(POINTS=>$relevant_points,MAXIMAL_CELLS=>$triangs[0]);
demande une nouvelle compilation à chaque fois, alors que ce n'est pas le cas pour :
$dual_sub = new fan::SubdivisionOfPoints(POINTS=>$points,MAXIMAL_CELLS=>$triangs[0]);
(où $points est une Matrix)
Pourquoi ? Cela pose problème dans b_0 et b_total

Problème : quand on passe une triangulation et des indices à la fonction de score, si on se restreint au sous-ensemble des points utilisés par la triangulation,
les indices des points (dans la triangulation) ne sont plus corrects


